---
slug: /taskfile-versions/
sidebar_position: 9
---

# Taskfile 版本

Taskfile 的语法和功能随时间演变。这篇文档描述了每个版本的变化，以及如何升级旧的 Taskfile。

## Taskfile 的版本意味着什么

Taskfile 的版本是绑定 Task 的版本的。例如 Taskfile 的版本是 `2`，表示 Task 应该使用 `v2.0.0` 版本来执行。

Taskfile 文件的 `version:` 关键字接受语义化字符串，所以 `2`, `2.0` 或 `2.0.0` 都可以。
如果使用版本号 `2.0`，那么 Task 就不会使用 `2.1` 的功能，但如果使用版本号 `2`, 那么任意 `2.x.x` 版本中的功能都是可用的，但 `3.0.0+` 的版本不可用。

## Version 1

> 注意：Task v3.0.0 以后就不再支持 Taskfiles 的 1 版本了。

In the first version of the `Taskfile`, the `version:` key was not available,
because the tasks was in the root of the YAML document. Like this:
在最早的 `Taskfile` 

```yaml
echo:
  cmds:
    - echo "Hello, World!"
```

The variable priority order was also different:

1. Call variables
2. Environment
3. Task variables
4. `Taskvars.yml` variables

## Version 2.0

At version 2, we introduced the `version:` key, to allow us to evolve Task
with new features without breaking existing Taskfiles. The new syntax is as
follows:

```yaml
version: '2'

tasks:
  echo:
    cmds:
      - echo "Hello, World!"
```

Version 2 allows you to write global variables directly in the Taskfile,
if you don't want to create a `Taskvars.yml`:

```yaml
version: '2'

vars:
  GREETING: Hello, World!

tasks:
  greet:
    cmds:
      - echo "{{.GREETING}}"
```

The variable priority order changed to the following:

1. Task variables
2. Call variables
3. Taskfile variables
4. Taskvars file variables
5. Environment variables

A new global option was added to configure the number of variables expansions
(which default to 2):

```yaml
version: '2'

expansions: 3

vars:
  FOO: foo
  BAR: bar
  BAZ: baz
  FOOBAR: "{{.FOO}}{{.BAR}}"
  FOOBARBAZ: "{{.FOOBAR}}{{.BAZ}}"

tasks:
  default:
    cmds:
      - echo "{{.FOOBARBAZ}}"
```

## Version 2.1

Version 2.1 includes a global `output` option, to allow having more control
over how commands output are printed to the console
(see [documentation][output] for more info):

```yaml
version: '2'

output: prefixed

tasks:
  server:
    cmds:
      - go run main.go
  prefix: server
```

From this version it's also possible to ignore errors of a command or task
(check documentation [here][ignore_errors]):

```yaml
version: '2'

tasks:
  example-1:
    cmds:
      - cmd: exit 1
        ignore_error: true
      - echo "This will be print"

  example-2:
    cmds:
      - exit 1
      - echo "This will be print"
    ignore_error: true
```

## Version 2.2

Version 2.2 comes with a global `includes` options to include other
Taskfiles:

```yaml
version: '2'

includes:
  docs: ./documentation # will look for ./documentation/Taskfile.yml
  docker: ./DockerTasks.yml
```

## Version 2.6

Version 2.6 comes with `preconditions` stanza in tasks.

```yaml
version: '2'

tasks:
  upload_environment:
    preconditions:
      - test -f .env
    cmds:
      - aws s3 cp .env s3://myenvironment
```

Please check the [documentation][includes]

[output]: usage.md#output-syntax
[ignore_errors]: usage.md#ignore-errors
[includes]: usage.md#including-other-taskfiles

## Version 3

These are some major changes done on `v3`:

- Task's output will now be colored
- Added support for `.env` like files
- Added `label:` setting to task so one can override how the task name
  appear in the logs
- A global `method:` was added to allow setting the default method,
  and Task's default changed to `checksum`
- Two magic variables were added when using `status:`: `CHECKSUM` and
  `TIMESTAMP` which contains, respectively, the md5 checksum and greatest
  modification timestamp of the files listed on `sources:`
- Also, the `TASK` variable is always available with the current task name
- CLI variables are always treated as global variables
- Added `dir:` option to `includes` to allow choosing on which directory an
  included Taskfile will run:

```yaml
includes:
  docs:
    taskfile: ./docs
    dir: ./docs
```

- Implemented short task syntax. All below syntaxes are equivalent:

```yaml
version: '3'

tasks:
  print:
    cmds:
      - echo "Hello, World!"
```

```yaml
version: '3'

tasks:
  print:
    - echo "Hello, World!"
```

```yaml
version: '3'

tasks:
  print: echo "Hello, World!"
```

- There was a major refactor on how variables are handled. They're now easier
  to understand. The `expansions:` setting was removed as it became unncessary.
  This is the order in which Task will process variables, each level can see
  the variables set by the previous one and override those.
  - Environment variables
  - Global + CLI variables
  - Call variables
  - Task variables
